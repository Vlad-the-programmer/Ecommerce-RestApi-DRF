# Generated by Django 5.2.7 on 2025-10-28 15:06

import datetime
import django.db.models.deletion
import django_countries.fields
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('category', '0001_initial'),
        ('inventory', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('date_deleted', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, verbose_name='Deleted')),
                ('address_line_1', models.CharField(db_index=True, help_text='Street address, P.O. box, company name', max_length=255)),
                ('address_line_2', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True)),
                ('house_number', models.CharField(blank=True, max_length=20, null=True)),
                ('street', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('apartment_number', models.CharField(blank=True, max_length=50, null=True)),
                ('zip_code', models.CharField(blank=True, db_index=True, max_length=15, null=True)),
                ('city', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('state', models.CharField(blank=True, db_index=True, help_text='State/Province/Region (e.g., Massachusetts, Ontario, Bavaria)', max_length=50, null=True)),
                ('country', django_countries.fields.CountryField(blank=True, db_index=True, max_length=2, null=True)),
                ('name', models.CharField(help_text='Name of the location', max_length=100, verbose_name='Location Name')),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
                'db_table': 'locations',
                'indexes': [models.Index(fields=['is_deleted'], name='locations_is_dele_9704d3_idx'), models.Index(fields=['is_active'], name='locations_is_acti_936f56_idx'), models.Index(fields=['is_deleted', 'is_active'], name='locations_is_dele_9c2a49_idx'), models.Index(fields=['date_created', 'is_deleted'], name='locations_date_cr_103406_idx'), models.Index(fields=['is_deleted', 'date_deleted'], name='locations_is_dele_712b62_idx'), models.Index(fields=['date_created', 'is_active', 'is_deleted'], name='locations_date_cr_ae50b7_idx'), models.Index(fields=['country', 'is_deleted'], name='locations_country_0aaba1_idx'), models.Index(fields=['city', 'is_deleted'], name='locations_city_32c72f_idx'), models.Index(fields=['state', 'is_deleted'], name='locations_state_39ebea_idx'), models.Index(fields=['zip_code', 'is_deleted'], name='locations_zip_cod_4831a1_idx'), models.Index(fields=['country', 'state', 'city', 'is_deleted'], name='locations_country_492c50_idx'), models.Index(fields=['name', 'is_deleted'], name='locations_name_432752_idx'), models.Index(fields=['name', 'is_active'], name='locations_name_cca9c4_idx')],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('date_deleted', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, verbose_name='Deleted')),
                ('slug', models.SlugField(blank=True, help_text='Unique URL-friendly identifier for the product', max_length=255, unique=True, verbose_name='URL Slug')),
                ('product_type', models.CharField(choices=[('physical', 'Physical Product'), ('digital', 'Digital Product'), ('service', 'Service'), ('bundle', 'Product Bundle'), ('subscription', 'Subscription')], db_index=True, default='physical', max_length=20, verbose_name='Product Type')),
                ('product_name', models.CharField(db_index=True, max_length=100, verbose_name='Product Name')),
                ('price', models.DecimalField(db_index=True, decimal_places=2, default=0.0, help_text='Base price for variants', max_digits=10, verbose_name='Base Price')),
                ('compare_at_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Compare At Price')),
                ('product_description', models.TextField(verbose_name='Product Description')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished'), ('open_box', 'Open Box'), ('damaged', 'Damaged')], db_index=True, default='new', max_length=20, verbose_name='Product Condition')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived'), ('deleted', 'Deleted')], db_index=True, default='draft', max_length=20, verbose_name='Publication Status')),
                ('stock_status', models.CharField(choices=[('in_stock', 'In Stock'), ('out_of_stock', 'Out of Stock'), ('low_stock', 'Low Stock'), ('backorder', 'Backorder'), ('discontinued', 'Discontinued'), ('pre_order', 'Pre-Order')], db_index=True, default='in_stock', max_length=20, verbose_name='Stock Status')),
                ('label', models.CharField(choices=[('none', 'None'), ('hot', 'Hot'), ('sale', 'Sale'), ('new_arrival', 'New Arrival'), ('featured', 'Featured'), ('best_seller', 'Best Seller'), ('limited_edition', 'Limited Edition'), ('clearance', 'Clearance')], db_index=True, default='none', max_length=20, verbose_name='Product Label')),
                ('low_stock_threshold', models.PositiveIntegerField(default=5, verbose_name='Low Stock Threshold')),
                ('track_inventory', models.BooleanField(default=True, verbose_name='Track Inventory')),
                ('sale_start_date', models.DateTimeField(blank=True, null=True)),
                ('sale_end_date', models.DateTimeField(blank=True, null=True)),
                ('featured_until', models.DateTimeField(blank=True, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Weight (kg)')),
                ('dimensions', models.CharField(blank=True, max_length=100)),
                ('requires_shipping', models.BooleanField(default=True)),
                ('fragile', models.BooleanField(default=False)),
                ('hazardous', models.BooleanField(default=False)),
                ('sku', models.CharField(blank=True, help_text='Base SKU for products without variants', max_length=100, null=True, unique=True, verbose_name='Product SKU')),
                ('barcode', models.CharField(blank=True, max_length=100, null=True)),
                ('manufacturing_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Base cost of manufacturing this product (materials, labor, overhead)', max_digits=10, null=True, verbose_name='Base Manufacturing Cost')),
                ('packaging_cost', models.DecimalField(blank=True, decimal_places=2, default=0.0, help_text='Base cost of packaging materials for this product', max_digits=8, null=True, verbose_name='Base Packaging Cost')),
                ('shipping_to_warehouse_cost', models.DecimalField(blank=True, decimal_places=2, default=0.0, help_text='Base cost to ship this product from manufacturer to warehouse', max_digits=8, null=True, verbose_name='Base Shipping to Warehouse Cost')),
                ('manufacturing_location', models.CharField(blank=True, help_text='Primary location where this product is manufactured', max_length=100, null=True, verbose_name='Manufacturing Location')),
                ('manufacturing_date', models.DateField(blank=True, help_text='Date when this product was first manufactured or produced', null=True, verbose_name='Manufacturing Date')),
                ('batch_number', models.CharField(blank=True, help_text='Primary manufacturing batch or lot number', max_length=50, null=True, verbose_name='Base Batch Number')),
                ('shelf_life', models.DurationField(blank=True, help_text='How long this product remains usable or sellable after manufacturing', null=True, verbose_name='Shelf Life')),
                ('download_file', models.FileField(blank=True, null=True, upload_to='digital_products/')),
                ('download_limit', models.PositiveIntegerField(default=1)),
                ('access_duration', models.DurationField(blank=True, null=True)),
                ('file_size', models.PositiveBigIntegerField(blank=True, null=True)),
                ('file_type', models.CharField(blank=True, max_length=50)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('location_required', models.BooleanField(default=False)),
                ('service_type', models.CharField(choices=[('consultation', 'Consultation'), ('repair', 'Repair'), ('installation', 'Installation'), ('training', 'Training'), ('other', 'Other')], default='consultation', max_length=50)),
                ('provider_notes', models.TextField(blank=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='category.category', verbose_name='Category')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='service_products', to='products.location')),
                ('subcategories', models.ManyToManyField(blank=True, related_name='products_subcategories', to='category.category', verbose_name='Subcategories')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'db_table': 'products',
                'ordering': ['product_name'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('date_deleted', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, verbose_name='Deleted')),
                ('image', models.ImageField(help_text='Product image for display', upload_to='products/', verbose_name='Image')),
                ('alt_text', models.CharField(blank=True, help_text='Alternative text for accessibility and SEO', max_length=200, verbose_name='Alt Text')),
                ('display_order', models.IntegerField(default=0, help_text='Order in which images are displayed (lower numbers first)', verbose_name='Display Order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_images', to='products.product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'db_table': 'product_images',
                'ordering': ['display_order', '-date_created'],
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('date_deleted', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, verbose_name='Deleted')),
                ('sku', models.CharField(max_length=100, unique=True, verbose_name='Variant SKU')),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, help_text='Actual cost for this specific variant', max_digits=10, null=True, verbose_name='Cost Price')),
                ('price_adjustment', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Price Adjustment')),
                ('stock_quantity', models.PositiveIntegerField(default=0, verbose_name='Stock Quantity')),
                ('low_stock_threshold', models.PositiveIntegerField(default=5, verbose_name='Low Stock Threshold')),
                ('color', models.CharField(blank=True, max_length=50, null=True)),
                ('size', models.CharField(blank=True, max_length=50, null=True)),
                ('material', models.CharField(blank=True, max_length=50, null=True)),
                ('style', models.CharField(blank=True, max_length=50, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_variants', to='products.product')),
                ('warehouse_inventory', models.ManyToManyField(related_name='product_variants', through='inventory.Inventory', to='inventory.warehouseprofile')),
            ],
            options={
                'verbose_name': 'Product Variant',
                'verbose_name_plural': 'Product Variants',
                'db_table': 'product_variants',
                'ordering': ['product', 'color', 'size'],
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['product_name'], name='products_product_97a29d_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'status'], name='products_categor_29e98f_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['product_type', 'status'], name='products_product_b75a9e_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['status', 'stock_status'], name='products_status_367e21_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['sku'], name='products_sku_fe2039_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['barcode'], name='products_barcode_d008ac_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['manufacturing_location'], name='products_manufac_cc72b9_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['batch_number'], name='products_batch_n_b39140_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['manufacturing_date'], name='products_manufac_b648f5_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['manufacturing_cost'], name='products_manufac_373dd6_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['manufacturing_date', 'manufacturing_location'], name='products_manufac_bb84c4_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['product_type', 'manufacturing_location'], name='products_product_00c7e9_idx'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('price__gte', 0)), name='non_negative_price'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('compare_at_price__isnull', True), ('compare_at_price__gte', models.F('price')), _connector='OR'), name='compare_at_price_gte_price'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('manufacturing_cost__gte', 0)), name='non_negative_mfg_cost'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('packaging_cost__gte', 0)), name='non_negative_packaging_cost'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('shipping_to_warehouse_cost__gte', 0)), name='non_negative_ship_cost'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('shelf_life__gt', datetime.timedelta(0)), ('shelf_life__isnull', True), _connector='OR'), name='positive_shelf_life'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['is_deleted'], name='product_ima_is_dele_9623b1_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['is_active'], name='product_ima_is_acti_4b67ff_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['is_deleted', 'is_active'], name='product_ima_is_dele_7df2ff_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['date_created', 'is_deleted'], name='product_ima_date_cr_7377ae_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['is_deleted', 'date_deleted'], name='product_ima_is_dele_f8c3fc_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['date_created', 'is_active', 'is_deleted'], name='product_ima_date_cr_55de1c_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['product', 'is_deleted'], name='product_ima_product_e2d920_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['product', 'display_order', 'is_deleted'], name='product_ima_product_e8e3fe_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['is_deleted'], name='product_var_is_dele_e00b20_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['is_active'], name='product_var_is_acti_c7d489_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['is_deleted', 'is_active'], name='product_var_is_dele_e64044_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['date_created', 'is_deleted'], name='product_var_date_cr_b30560_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['is_deleted', 'date_deleted'], name='product_var_is_dele_af6870_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['date_created', 'is_active', 'is_deleted'], name='product_var_date_cr_2a6413_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['product', 'is_deleted', 'is_active'], name='product_var_product_7ea04a_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['sku', 'is_deleted'], name='product_var_sku_422132_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['color', 'is_deleted'], name='product_var_color_f13977_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['size', 'is_deleted'], name='product_var_size_f8770c_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['material', 'is_deleted'], name='product_var_materia_b0313a_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['style', 'is_deleted'], name='product_var_style_1cc6ed_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['stock_quantity', 'is_deleted'], name='product_var_stock_q_22fd31_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['product', 'stock_quantity', 'is_deleted'], name='product_var_product_d97e85_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['is_deleted', 'stock_quantity', 'is_active'], name='product_var_is_dele_4953aa_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['price_adjustment', 'is_deleted'], name='product_var_price_a_b0b645_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['cost_price', 'is_deleted'], name='product_var_cost_pr_172b23_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['product', 'color', 'size', 'is_deleted'], name='product_var_product_4b555b_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['is_deleted', 'is_active', 'stock_quantity'], name='product_var_is_dele_a9f8b3_idx'),
        ),
        migrations.AddConstraint(
            model_name='productvariant',
            constraint=models.CheckConstraint(condition=models.Q(('stock_quantity__gte', 0)), name='non_negative_stock_quantity'),
        ),
        migrations.AddConstraint(
            model_name='productvariant',
            constraint=models.CheckConstraint(condition=models.Q(('low_stock_threshold__gte', 0)), name='non_negative_low_stock_threshold'),
        ),
        migrations.AlterUniqueTogether(
            name='productvariant',
            unique_together={('product', 'color', 'size', 'material', 'style')},
        ),
    ]
