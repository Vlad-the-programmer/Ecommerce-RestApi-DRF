# Generated by Django 5.2.7 on 2025-10-25 16:51

import datetime
import django.db.models.deletion
import django_countries.fields
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('category', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('date_deleted', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, verbose_name='Deleted')),
                ('address_line_1', models.CharField(help_text='Street address, P.O. box, company name', max_length=255)),
                ('address_line_2', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True)),
                ('house_number', models.CharField(blank=True, max_length=20, null=True)),
                ('street', models.CharField(blank=True, max_length=100, null=True)),
                ('apartment_number', models.CharField(blank=True, max_length=50, null=True)),
                ('zip_code', models.CharField(blank=True, max_length=15, null=True)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('state', models.CharField(blank=True, help_text='State/Province/Region (e.g., Massachusetts, Ontario, Bavaria)', max_length=50, null=True)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('name', models.CharField(help_text='Name of the location', max_length=100, verbose_name='Location Name')),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
                'db_table': 'locations',
                'indexes': [models.Index(fields=['is_deleted'], name='locations_is_dele_9704d3_idx'), models.Index(fields=['is_active'], name='locations_is_acti_936f56_idx'), models.Index(fields=['is_deleted', 'is_active'], name='locations_is_dele_9c2a49_idx'), models.Index(fields=['date_created', 'is_deleted'], name='locations_date_cr_103406_idx'), models.Index(fields=['is_deleted', 'date_deleted'], name='locations_is_dele_712b62_idx'), models.Index(fields=['date_created', 'is_active', 'is_deleted'], name='locations_date_cr_ae50b7_idx'), models.Index(fields=['country', 'is_deleted'], name='locations_country_0aaba1_idx'), models.Index(fields=['city', 'is_deleted'], name='locations_city_32c72f_idx'), models.Index(fields=['state', 'is_deleted'], name='locations_state_39ebea_idx'), models.Index(fields=['zip_code', 'is_deleted'], name='locations_zip_cod_4831a1_idx'), models.Index(fields=['country', 'state', 'city', 'is_deleted'], name='locations_country_492c50_idx'), models.Index(fields=['name', 'is_deleted'], name='locations_name_432752_idx'), models.Index(fields=['name', 'is_active'], name='locations_name_cca9c4_idx')],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('date_deleted', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, verbose_name='Deleted')),
                ('slug', models.SlugField(blank=True, help_text='Unique URL-friendly identifier for the product', max_length=255, unique=True, verbose_name='URL Slug')),
                ('product_type', models.CharField(choices=[('physical', 'Physical Product'), ('digital', 'Digital Product'), ('service', 'Service'), ('bundle', 'Product Bundle'), ('subscription', 'Subscription')], db_index=True, default='physical', help_text="Type of product determines how it's handled and delivered", max_length=20, verbose_name='Product Type')),
                ('product_name', models.CharField(db_index=True, help_text='Name of the product as displayed to customers', max_length=100, verbose_name='Product Name')),
                ('price', models.DecimalField(db_index=True, decimal_places=2, default=0.0, help_text='Current selling price displayed to customers', max_digits=10, verbose_name='Selling Price')),
                ('compare_at_price', models.DecimalField(blank=True, decimal_places=2, help_text='Original price before discount for showing savings', max_digits=10, null=True, verbose_name='Compare At Price')),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, help_text='Total cost to acquire or produce this item for profit calculations', max_digits=10, null=True, verbose_name='Cost Price')),
                ('product_description', models.TextField(help_text='Detailed description of the product features and specifications', verbose_name='Product Description')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished'), ('open_box', 'Open Box'), ('damaged', 'Damaged')], db_index=True, default='new', help_text='Physical condition of the product', max_length=20, verbose_name='Product Condition')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived'), ('deleted', 'Deleted')], db_index=True, default='draft', help_text='Current publication status in the store', max_length=20, verbose_name='Publication Status')),
                ('stock_status', models.CharField(choices=[('in_stock', 'In Stock'), ('out_of_stock', 'Out of Stock'), ('backorder', 'Backorder'), ('discontinued', 'Discontinued'), ('pre_order', 'Pre-Order')], db_index=True, default='in_stock', help_text='Current availability status based on inventory', max_length=20, verbose_name='Stock Status')),
                ('label', models.CharField(choices=[('none', 'None'), ('hot', 'Hot'), ('sale', 'Sale'), ('new_arrival', 'New Arrival'), ('featured', 'Featured'), ('best_seller', 'Best Seller'), ('limited_edition', 'Limited Edition'), ('clearance', 'Clearance')], db_index=True, default='none', help_text='Marketing label for highlighting products', max_length=20, verbose_name='Product Label')),
                ('stock_quantity', models.PositiveIntegerField(default=0, help_text='Current number of items available in inventory', verbose_name='Stock Quantity')),
                ('low_stock_threshold', models.PositiveIntegerField(default=5, help_text='Minimum stock level before low stock alerts', verbose_name='Low Stock Threshold')),
                ('sale_start_date', models.DateTimeField(blank=True, help_text='Date and time when the sale price becomes active', null=True, verbose_name='Sale Start Date')),
                ('sale_end_date', models.DateTimeField(blank=True, help_text='Date and time when the sale price expires', null=True, verbose_name='Sale End Date')),
                ('featured_until', models.DateTimeField(blank=True, help_text='Date when the product will no longer be featured', null=True, verbose_name='Featured Until')),
                ('track_inventory', models.BooleanField(default=True, help_text='Enable inventory tracking and stock level management', verbose_name='Track Inventory')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Product weight in kilograms (kg) for shipping calculations', max_digits=8, null=True, verbose_name='Weight')),
                ('dimensions', models.CharField(blank=True, help_text='Product dimensions in centimeters. Format: Length×Width×Height (e.g., 30×20×10)', max_length=100, verbose_name='Dimensions')),
                ('requires_shipping', models.BooleanField(default=True, help_text='Whether this product requires physical shipping or is pickup-only', verbose_name='Requires Shipping')),
                ('fragile', models.BooleanField(default=False, help_text='Whether this product requires special fragile handling during shipping', verbose_name='Fragile Item')),
                ('hazardous', models.BooleanField(default=False, help_text='Whether this product contains hazardous materials requiring special shipping', verbose_name='Hazardous Material')),
                ('sku', models.CharField(blank=True, help_text='Stock Keeping Unit - unique identifier for inventory management', max_length=100, null=True, unique=True, verbose_name='SKU')),
                ('barcode', models.CharField(blank=True, help_text='Barcode number (UPC, EAN, ISBN) for scanning and inventory tracking', max_length=100, null=True, verbose_name='Barcode')),
                ('manufacturing_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Direct cost of manufacturing this product (materials, labor, overhead)', max_digits=10, null=True, verbose_name='Manufacturing Cost')),
                ('packaging_cost', models.DecimalField(blank=True, decimal_places=2, default=0.0, help_text='Cost of packaging materials for this product', max_digits=8, null=True, verbose_name='Packaging Cost')),
                ('shipping_to_warehouse_cost', models.DecimalField(blank=True, decimal_places=2, default=0.0, help_text='Cost to ship this product from manufacturer to your warehouse', max_digits=8, null=True, verbose_name='Shipping to Warehouse Cost')),
                ('manufacturing_location', models.CharField(blank=True, help_text='Location where this product is manufactured (country, city, or factory)', max_length=100, null=True, verbose_name='Manufacturing Location')),
                ('manufacturing_date', models.DateField(blank=True, help_text='Date when this product was manufactured or produced', null=True, verbose_name='Manufacturing Date')),
                ('batch_number', models.CharField(blank=True, help_text='Manufacturing batch or lot number for quality control', max_length=50, null=True, verbose_name='Batch Number')),
                ('shelf_life', models.DurationField(blank=True, help_text='How long this product remains usable or sellable after manufacturing', null=True, verbose_name='Shelf Life')),
                ('download_file', models.FileField(blank=True, help_text='Digital file for customer download', null=True, upload_to='digital_products/', verbose_name='Download File')),
                ('download_limit', models.PositiveIntegerField(default=1, help_text='Number of times the file can be downloaded', verbose_name='Download Limit')),
                ('access_duration', models.DurationField(blank=True, help_text='How long customers have access (e.g., 30 days)', null=True, verbose_name='Access Duration')),
                ('file_size', models.PositiveBigIntegerField(blank=True, help_text='File size in bytes', null=True, verbose_name='File Size')),
                ('file_type', models.CharField(blank=True, help_text='File format type (e.g., PDF, MP4, ZIP)', max_length=50, verbose_name='File Type')),
                ('duration', models.DurationField(blank=True, help_text='Expected service duration', null=True, verbose_name='Service Duration')),
                ('location_required', models.BooleanField(default=False, help_text='Whether the service requires physical location access', verbose_name='Location Required')),
                ('service_type', models.CharField(choices=[('consultation', 'Consultation'), ('repair', 'Repair'), ('installation', 'Installation'), ('training', 'Training'), ('other', 'Other')], default='consultation', help_text='Type of service being offered', max_length=50, verbose_name='Service Type')),
                ('provider_notes', models.TextField(blank=True, help_text='Internal notes for service providers', verbose_name='Provider Notes')),
                ('category', models.ForeignKey(help_text='Main category for organizing products', on_delete=django.db.models.deletion.CASCADE, related_name='products', to='category.category', verbose_name='Category')),
                ('location', models.ForeignKey(blank=True, help_text='Location where the service is provided', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='service_products', to='products.location', verbose_name='Location')),
                ('parent', models.ForeignKey(blank=True, help_text='Parent product for product variants', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='products.product', verbose_name='Parent Product')),
                ('subcategories', models.ManyToManyField(blank=True, help_text='Optional secondary categories for this product', related_name='products_subcategories', to='category.category', verbose_name='Subcategories')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'db_table': 'products',
                'ordering': ['product_name'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('date_deleted', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, verbose_name='Deleted')),
                ('image', models.ImageField(help_text='Product image for display', upload_to='products/', verbose_name='Image')),
                ('alt_text', models.CharField(blank=True, help_text='Alternative text for accessibility and SEO', max_length=200, verbose_name='Alt Text')),
                ('display_order', models.IntegerField(default=0, help_text='Order in which images are displayed (lower numbers first)', verbose_name='Display Order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_images', to='products.product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'db_table': 'product_images',
                'ordering': ['display_order', '-date_created'],
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, null=True)),
                ('date_updated', models.DateTimeField(auto_now=True, null=True)),
                ('date_deleted', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, verbose_name='Deleted')),
                ('sku', models.CharField(help_text='Unique Stock Keeping Unit for this specific variant', max_length=100, unique=True, verbose_name='Variant SKU')),
                ('price_adjustment', models.DecimalField(decimal_places=2, default=0.0, help_text='Additional price for this variant (can be negative for discounts)', max_digits=10, verbose_name='Price Adjustment')),
                ('stock_quantity', models.PositiveIntegerField(default=0, help_text='Stock quantity for this specific variant', verbose_name='Variant Stock')),
                ('color', models.CharField(blank=True, help_text='Color variant (e.g., Red, Blue, Green)', max_length=50, null=True, verbose_name='Color')),
                ('size', models.CharField(blank=True, help_text='Size variant (e.g., Small, Medium, Large)', max_length=50, null=True, verbose_name='Size')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_variants', to='products.product')),
            ],
            options={
                'verbose_name': 'Product Variant',
                'verbose_name_plural': 'Product Variants',
                'db_table': 'product_variants',
                'ordering': ['-date_created'],
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['product_name'], name='prod_name_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category'], name='prod_category_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'product_type'], name='prod_category_type_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['cost_price'], name='prod_cost_price_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['status'], name='prod_status_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['stock_status'], name='prod_stock_status_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['condition'], name='prod_condition_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['label'], name='prod_label_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['product_type'], name='prod_type_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['stock_quantity'], name='prod_stock_qty_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['stock_status', 'stock_quantity'], name='prod_stock_qty_status_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['label', 'status'], name='prod_label_status_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['sale_start_date', 'sale_end_date'], name='prod_sale_dates_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['featured_until'], name='prod_featured_until_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['status', 'stock_status', 'category'], name='prod_status_stock_category_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['status', 'product_type', 'category'], name='prod_status_type_category_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['slug'], name='prod_slug_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'slug'], name='prod_category_slug_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['sku'], name='prod_sku_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['barcode'], name='prod_barcode_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['manufacturing_location'], name='prod_mfg_location_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['batch_number'], name='prod_batch_number_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['requires_shipping'], name='prod_requires_shipping_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['weight'], name='prod_weight_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['fragile'], name='prod_fragile_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['hazardous'], name='prod_hazardous_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['manufacturing_date', 'manufacturing_location'], name='prod_mfg_date_location_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['manufacturing_cost'], name='prod_mfg_cost_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['file_type'], name='prod_file_type_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['service_type'], name='prod_service_type_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['location_required'], name='prod_location_required_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['service_type', 'duration'], name='prod_service_type_duration_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['service_type', 'location_required'], name='prod_service_type_loc_idx'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('price__gt', 0)), name='non_negative_greater_than_zero_price'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('stock_quantity__gt', 0)), name='stock_quantity_gt_0'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('low_stock_threshold__gt', 0)), name='low_stock_threshold_gt_0'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('compare_at_price__isnull', True), ('price__lt', models.F('compare_at_price')), _connector='OR'), name='compare_at_price_greater_than_price'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('cost_price__isnull', True), ('cost_price__lt', models.F('cost_price')), _connector='OR'), name='cost_price_greater_than_price'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('sale_end_date__isnull', True), ('sale_start_date__isnull', True), ('sale_end_date__gte', models.F('sale_start_date')), _connector='OR'), name='valid_sale_date_range'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('low_stock_threshold__lte', models.F('stock_quantity'))), name='valid_low_stock_threshold'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('pk', models.F('parent_id')), _negated=True), name='prevent_self_parent_reference_for_product'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('weight__gte', 0)), name='non_negative_weight'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('manufacturing_cost__gte', 0)), name='non_negative_mfg_cost'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('packaging_cost__gte', 0)), name='non_negative_packaging_cost'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('shipping_to_warehouse_cost__gte', 0)), name='non_negative_ship_cost'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('shelf_life__gt', datetime.timedelta(0)), ('shelf_life__isnull', True), _connector='OR'), name='positive_shelf_life'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('duration__gte', datetime.timedelta(seconds=300))), name='min_duration_5m'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('location_required', False), ('location__isnull', False), _connector='OR'), name='location_required_with_location'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['is_deleted'], name='product_ima_is_dele_9623b1_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['is_active'], name='product_ima_is_acti_4b67ff_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['is_deleted', 'is_active'], name='product_ima_is_dele_7df2ff_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['date_created', 'is_deleted'], name='product_ima_date_cr_7377ae_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['is_deleted', 'date_deleted'], name='product_ima_is_dele_f8c3fc_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['date_created', 'is_active', 'is_deleted'], name='product_ima_date_cr_55de1c_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['product', 'is_deleted'], name='product_ima_product_e2d920_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['product', 'display_order', 'is_deleted'], name='product_ima_product_e8e3fe_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['is_deleted'], name='product_var_is_dele_e00b20_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['is_active'], name='product_var_is_acti_c7d489_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['is_deleted', 'is_active'], name='product_var_is_dele_e64044_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['date_created', 'is_deleted'], name='product_var_date_cr_b30560_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['is_deleted', 'date_deleted'], name='product_var_is_dele_af6870_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['date_created', 'is_active', 'is_deleted'], name='product_var_date_cr_2a6413_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['product', 'is_deleted'], name='product_var_product_62ad0f_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['sku', 'is_deleted'], name='product_var_sku_422132_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['color', 'is_deleted'], name='product_var_color_f13977_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['size', 'is_deleted'], name='product_var_size_f8770c_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['product', 'color', 'size', 'is_deleted'], name='product_var_product_4b555b_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['stock_quantity', 'is_deleted'], name='product_var_stock_q_22fd31_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['product', 'stock_quantity', 'is_deleted'], name='product_var_product_d97e85_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['price_adjustment', 'is_deleted'], name='product_var_price_a_b0b645_idx'),
        ),
        migrations.AddConstraint(
            model_name='productvariant',
            constraint=models.CheckConstraint(condition=models.Q(('price_adjustment__gte', 0)), name='non_negative_price_adjustment'),
        ),
        migrations.AlterUniqueTogether(
            name='productvariant',
            unique_together={('product', 'color', 'size')},
        ),
    ]
